@import "tailwindcss";

:root {
  /* First some defaults, usable everywhere */
  --default-size: 1rem;
  --gap: calc(var(--default-size) / 3);
  --grid-columns: 1;
  
  --grid-span-100: span var(--grid-columns);
  --grid-span-75: span var(--grid-columns);
  --grid-span-50: span var(--grid-columns);
  --grid-span-25: span var(--grid-columns);
}
@media (min-width: 30rem) {
  :root {
    /* We only need to reassign a new value as it inherits the default values. */
    --grid-columns: 4;
    --grid-span-75: span calc(var(--grid-columns) * 0.75);
    --grid-span-50: span calc(var(--grid-columns) / 2);
    --grid-span-25: span calc(var(--grid-columns) * 0.25);
  }
}
@media (min-width: 40rem) {
  :root {
    /* Even less reassigning needed. Everything will arrange itself */
    --gap: calc(var(--default-size) / 2);
    --grid-columns: 8;
  }
}
@media (min-width: 60rem) {
  :root {
    --gap: var(--default-size);
    --grid-columns: 12;
  }
}


/* By using the custom properties, there are no media queries needed for this element as the custom properties handle this. 
This allows you to reuse a lot of css and keeps your code maintainable. */
.wrapper {
  display: grid;
  grid-template-columns: repeat(var(--grid-columns), minmax(1rem, 1fr));
  gap: var(--gap);
}

.some-column {
  padding: var(--gap);
  display: flex;
  align-items: center;
  justify-content: center;
  counter-increment: css-rocks;
}

.some-column::before {
  content:  ' ðŸš€ ' counter(css-rocks);
  margin-right: auto;
}

/* You'll notice that when resizing the screen, this element changes width automatically */
.some-column:nth-child(1) {
  grid-column: var(--grid-span-75);
  background-color: rebeccapurple;
  color: white;
  
  display: flex;
  align-items: center;
}

/* You'll notice that when resizing the screen, this elements changes width automatically */
.some-column:nth-child(2),
.some-column:nth-child(4),
.some-column:nth-child(5),
.some-column:nth-child(6),
.some-column:nth-child(7) {
  grid-column: var(--grid-span-25);
  background-color: navy;
  color: white;
}

.some-column:nth-child(3),
.some-column:nth-child(8) {
  grid-column: var(--grid-span-100);
  background-color: orange;
}

.some-column:nth-child(9),
.some-column:nth-child(10),
.some-column:nth-child(11),
.some-column:nth-child(12),
.some-column:nth-child(13) {
  background-color: olive;
  color: white;
  grid-column: var(--grid-span-50);
}
.some-column:nth-child(9) {
  grid-row: span 4;
}

.some-column.some-special-column {
  --inner-columns: 8;
  display: grid;
  grid-template-columns: var(--inner-columns);
  gap: var(--gap);
}

.some-title {
   grid-column: span calc(var(--inner-columns));
}

.some-details {
  all: unset;
   grid-column: span calc(var(--inner-columns));
  
}

.some-image {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  object-fit: cover;
  grid-column: span calc(var(--inner-columns));

}

.some-cta {
  grid-column: span calc(var(--inner-columns));
}

@media (min-width: 40rem) {
  .some-image {
  grid-row: span 2;
    
      grid-column: span calc(var(--inner-columns) / 2);
  }
  .some-details {
    grid-column: span calc(var(--inner-columns) / 2);
  }
  
  .some-cta {
    grid-column: span calc(var(--inner-columns) * .25);
  }
}


@media (min-width: 60rem) {
  .some-image {
  grid-row: span 2;
    
      grid-column: span calc(var(--inner-columns) * .25);
  }
  .some-details {
    grid-column: span calc(var(--inner-columns) / 2);
  }
  
  .some-cta {
    grid-column: span calc(var(--inner-columns) * .25);
  }
}
